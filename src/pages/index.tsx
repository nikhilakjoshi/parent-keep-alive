import { useCallback, useEffect, useRef, useState } from "react";
import Head from "next/head";
import clsx from "clsx";
import { Rubik } from "next/font/google";
import { SwitchTransition, CSSTransition } from "react-transition-group";

const font = Rubik({
  subsets: ["latin-ext"],
});

export default function Home() {
  const [status, setStatus] = useState("Not Triggered");
  const iframeRef = useRef<HTMLIFrameElement>(null);
  const postMessage = useCallback(async ({ key }: { key: string }) => {
    //timeout for 1500ms
    setStatus("Posting Message...");
    await new Promise((resolve) => setTimeout(resolve, 1500));
    iframeRef.current?.contentWindow?.postMessage(
      JSON.stringify({ key }),
      "https://child-keep-alive.vercel.app",
    );
    setStatus("Posted");
  }, []);
  const triggerKeepAlive = useCallback(async () => {
    setStatus("Triggering...");
    const re = await fetch("/api/keep-alive");
    const { key } = (await re.json()) as { key: string };
    setStatus("Triggered");
    postMessage({ key });
  }, []);

  useEffect(() => {
    const listener = async (e: MessageEvent) => {
      if (e.origin !== "https://child-keep-alive.vercel.app") return;
      setStatus("Received from Child");
      await new Promise((resolve) => setTimeout(resolve, 1500));
      triggerKeepAlive();
    };
    window.addEventListener("message", listener);
    return () => window.removeEventListener("message", listener);
  }, []);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={clsx(font.className, "flex min-h-screen flex-col")}>
        <nav className="bg-sky-200 px-20 py-4">
          <div className="text-xl font-semibold">Parent App</div>
        </nav>
        <main className="grow bg-gray-100">
          <div className="px-20 pt-4">
            <button
              onClick={triggerKeepAlive}
              className="rounded-lg bg-blue-600 px-3 py-1.5 text-sm tracking-wide text-gray-50 shadow"
            >
              Trigger
            </button>
            <div className="mt-4">
              Status:{" "}
              <SwitchTransition mode="out-in">
                <CSSTransition key={status} timeout={300} classNames="fade">
                  <pre className="inline-block rounded bg-gray-300 px-2 py-0.5">
                    {status}
                  </pre>
                </CSSTransition>
              </SwitchTransition>
            </div>
          </div>
          <div className="flex h-[75dvh] w-full overflow-hidden px-20 py-4">
            <iframe
              ref={iframeRef}
              src="https://child-keep-alive.vercel.app"
              sandbox="allow-same-origin allow-scripts allow-popups allow-forms"
              className="h-full grow rounded-lg shadow-md"
            ></iframe>
          </div>
        </main>
      </div>
    </>
  );
}
